import java.util.List;
import java.util.Random;
import java.util.Iterator;

/**
*A simple model of trees.
*Trees can grow every 5 turns and can take over grass.

*@author David J. Barnes and Michael KÃ¶lling
* @version 2016.02.29 (2)
*/

public Trees extends Organism
{
//the trees reproducing each turn
private static final double SPREAD_PROBABILITY = 0.2;
//the trees channce of dying in a fire is 60%
private static final double FIRE_DEATH_PROBABILITY=0.6;
//maximum vegetables per square is 10
private static final int MAX_VEGETABLE_UNITS=10;
//vegetation growth is random
private static final Random rand = Randomizer.getRandom();

//track trees to grow every 5 turns
private int age;

/**
* Create new trees. 
* 
* @param field The field currently occupied.
* @param location The location within the field.
*/

public Trees (Field field, Location location)
{
super (field, location);
}

/**
*@param newTrees A List to return newly grown trees.
*/
public void spread(List<Organism>newTrees)
{
if (isAlive()) {
  spread(newTrees);
  //try to grow in new location
  Location newLocation = getField().freeAdjacentLocation(getLocation());
    if(newLocation != null && MAX_VEGETABLE_UNITS <10) {
        setLocation(newLocation);
    }
    else {
        setDead();
    }
}

/**
*trees can overtake grass organism but not deer organism
*/
private Location killGrass()
{
Field field = getField();
List <Location> adjacent = field.adjacentLocations(getLocation());
Iterator<Location> it = adjacent.iterator();
  while(it.hasNext()) {
      Location where = it.next();
      Object organism = field.getObjectAt(where);
      if (organism instanceof Grass) {
          Grass grass = (Grass) organism;
          if(grass.isAlive()) {
              grass.setDead();
              return(where);
          }
      }
  }
return null;
}

public void Fire()
    {
        if(rand.nextDouble() <= FIRE_DEATH_PROBABILITY) {
            setDead();
    }
}


